
//https://de.wikipedia.org/wiki/Polygon#Fl%C3%A4cheninhalt
Area(polygon){
    n = width(polygon);
    sum = 0; i = 0;
    while(i<n-1){
        sum = sum + (polygon[i][1]+polygon[i+1][1])*(polygon[i][0]-polygon[i+1][0]);
        i=i+1;
    }
    sum = sum + (polygon[-1][1]+polygon[0][1])*(polygon[-1][0]-polygon[0][0]);
    return sum/2;
}

randomPointonTriangle(polygon, Triangle){ //https://gamedev.stackexchange.com/questions/136243/how-can-i-randomly-pick-points-on-a-triangle
    x = rand();
    y = rand()*(1-x); //0<=x+y <=1

    //projecting the values to the triangle
    vX = (Triangle[2]-Triangle[0])*x;
    vY =(Triangle[1]-Triangle[0])*x;
    
    //return as point
    return [vX,vY];

    
    
}

MCI(M, Function){

    areaM = Area(M); //calculate for later
    Triangulation = EarCut(M);
    probs = [];
    i = 0;
    sumAreas = 0;
    while(i<width(Triangulation)){
        probs = probs ++ [Area(Triangulation[i])]; //append area of ith triangle 
        i = i+1;
    }
    probs = probs / areaM; //divide whole array/vector by overall area top get the probabilities, haha exploiting the language lmao



    //main loop
    n = 1 ; // number of iterations
    sum= 0;
    intergral = 0;
    while(1){
        random = rand();
        i = 0;
        sumProbs =0;
        while(sumProbs<random){ //random must be: random <= sumProbs --> probs[i]
            sumProbs= sumProbs + probs[i];
            i=i+1;

        }
        randomPoint= randomPointonTriangle(Triangulation[i]);
        sum = sum + Function(randomPoint[0],randomPoint[1]);
        intergral = areaM/n * sum; //Intergralapproximation
        n = n+1;


    }
}

